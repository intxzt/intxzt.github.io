{"meta":{"title":"MoYuno","subtitle":"","description":"这是一个兴趣盎然的无名小站","author":"许政通","url":"https://xuzhengtong.com","root":"/"},"pages":[{"title":"所有标签","date":"2020-12-13T11:04:22.095Z","updated":"2020-12-13T11:04:22.095Z","comments":true,"path":"tags/index.html","permalink":"https://xuzhengtong.com/tags/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2020-12-13T11:04:22.095Z","updated":"2020-12-13T11:04:22.095Z","comments":true,"path":"categories/index.html","permalink":"https://xuzhengtong.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"如何薅到oracle羊毛","slug":"v2ray/v2ray-use1","date":"2020-12-13T05:27:42.000Z","updated":"2020-12-13T11:04:22.089Z","comments":true,"path":"2020/12/13/v2ray/v2ray-use1/","link":"","permalink":"https://xuzhengtong.com/2020/12/13/v2ray/v2ray-use1/","excerpt":"前言Oracle Cloud 承诺如下服务永久免费：概括起来就是：两台 入门服务器 、两块硬盘一共100G、10G对象存储和10G归档存储、两个oracle数据库、","text":"前言Oracle Cloud 承诺如下服务永久免费：概括起来就是：两台 入门服务器 、两块硬盘一共100G、10G对象存储和10G归档存储、两个oracle数据库、一个负载均衡（如果不嫌麻烦，可以结合这个与两台服务器组建v2ray负载网络，充分利用资源，个人用达不到那么高的负载，卖出去也是违法的，所以可以为了学习这么搞）以及每月10T的流量，超出后的流量大概几分钱/GB。 开始前准备注册账号需要梯子+双币信用卡。梯子去github找，信用卡实测招行万事通国际信用卡可以，其他银行签发的visa应该也问题不大。注意Home Region的选择，一般亚太区域的机房就可以满足需求。 然鹅，很多人可能就卡在注册这一步了。。。 创建VM选择一个操作系统，注意保存私钥用于登录，然后点击创建。 操作系统配置 使用xshell等工具使用私钥远程登入vm，注意用户不是root，为：opc。 sudo -i 切换到root。若要使用root用户登录，并使用密码验证，请切换到root用户并修改/etc/ssh/sshd_config文件： 12PermitRootLogin yesPasswordAuthentication yes 安装 docker 123yum install -y dockerSystemctl start dockerSystemctl enable docker 关闭 seLinux 修改 /etc/selinux/config 文件中 SELINUX=disabled 防火墙放通 443 端口 12firewall-cmd --zone=public --add-port=443/tcp --permanentfirewall-cmd --reload 完成以上步骤重启一下。 1reboot 出入站规则配置 入站放通443 出站放通所有 组建v2ray+ws+nginx+tls代理创建docker桥接网络在本组建方式中，通过nginx转发访问v2ray，所以v2ray不需要对外暴露端口，v2ray和nginx通过容器互联访问： 1docker network create -d bridge v2ray-net v2ray 在/etc/v2ray/目录下创建config.json文件，内容如下： 12345678910111213141516171819202122232425262728293031323334&#123; \"log\": &#123; \"access\": \"/var/log/v2ray/access.log\", \"error\": \"/var/log/v2ray/error.log\", \"loglevel\": \"warning\" &#125;, \"inbounds\": [ &#123; \"port\": 14641, \"protocol\": \"vmess\", \"settings\": &#123; \"clients\": [ &#123; \"id\": \"UUID填在这里\", \"level\": 1, \"alterId\": 64 &#125; ] &#125;, \"streamSettings\": &#123; \"network\": \"ws\", \"wsSettings\": &#123; \"path\": \"/ray\" &#125; &#125; &#125; ], \"outbounds\": [ &#123; \"protocol\": \"freedom\", \"settings\": &#123;&#125; &#125; ]&#125; 替换上面的uuid，此项为登录凭证。UUID 生成器 启动v2ray，注意v2ray的版本，这里使用了一个相对比较旧的版本。新版本功能虽然比较多，bug更多了。新版本docker image迁移到：v2fly/v2ray-core 1docker run -d --name v2ray --network v2ray-net -v /etc/v2ray/:/etc/v2ray/ -v /etc/localtime:/etc/localtime v2ray/official nginx + tls 首先准备域名和证书，并配置域名解析到你的vm。 创建 /etc/nginx.server.conf/ 目录，并放入证书和如下Nginx配置文件server.conf：其中server_name替换为域名，172.18.0.2 替换为v2ray容器v2ray-net网络IP 12345678910111213141516171819202122server &#123; listen 443 ssl http2 default_server; server_name vps.xuzhengtong.com; root &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html; ssl_certificate &quot;&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;1_vps.xuzhengtong.com_bundle.crt&quot;; ssl_certificate_key &quot;&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;2_vps.xuzhengtong.com.key&quot;; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; location &#x2F; &#123; proxy_redirect off; proxy_pass http:&#x2F;&#x2F;172.18.0.2:14641&#x2F;ray; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;upgrade&quot;; proxy_set_header Host $http_host; &#125;&#125; 启动Nginx 1docker run -d --name v2rayNginx --network v2ray-net -p 443:443 -v /etc/nginx.server.conf/:/etc/nginx/conf.d -v /etc/localtime:/etc/localtime nginx 客户端连接 测试谷歌和下载速度：谷歌： 连接延迟： 下载速度：","categories":[{"name":"v2ray","slug":"v2ray","permalink":"https://xuzhengtong.com/categories/v2ray/"}],"tags":[{"name":"v2ray","slug":"v2ray","permalink":"https://xuzhengtong.com/tags/v2ray/"}]},{"title":"使用Jenkins自动化构建GitHub Pages","slug":"blog-create-use/auto-build","date":"2020-07-05T05:28:50.000Z","updated":"2020-12-13T11:04:22.063Z","comments":true,"path":"2020/07/05/blog-create-use/auto-build/","link":"","permalink":"https://xuzhengtong.com/2020/07/05/blog-create-use/auto-build/","excerpt":"前言我们进行文章写作，更多的时候不想去关注构建的事情，然而，使用hexo和GitHub必然需要build并push到GitHub pages。使用JenKins可以将构建从写作的步骤中拆除。","text":"前言我们进行文章写作，更多的时候不想去关注构建的事情，然而，使用hexo和GitHub必然需要build并push到GitHub pages。使用JenKins可以将构建从写作的步骤中拆除。 安装Jenkins启动方式 方式一：直接运行war（内置了jetty，需首先安装JDK） 1java -jar jenkins.war 方式二：使用Tomcat:将jenkins.war存放至webapps目录，启动tomcat即可。（同样需要JDK胡或者JRE环境） 方式三：docker建议去Docker Hub检查一下最新版镜像，某些插件依赖最新版本 12docker pull jenkins/jenkins:2.235.1-lts-centos7docker run --name jenkins -p 8080:8080 -p 50000:50000 -e TZ=Asia/Shanghai -v /usr/local/jenkins/data:/var/jenkins_home 08b8cad08fb 配置从日志或者/usr/local/jenkins/data//secrets/initialAdminPassword中获取admin初始密码 后续安装插件的步骤可以跳过或者默认安装即可。建议新建一个用户，就不需要每次都使用admin用户登陆了。 插件需要安装Git、GitHub和NodeJS插件 Git安装Git插件的时候，一般会自动安装Git Client，如果没有的话，需要自行安装Git，插件配置保持默认： 注意配置Git userName和Email 以及 ssh私钥（jenkins）和公钥（GitHub后台），这里不在多讲。 NodeJS GitHubGitHub插件没有什么需要特别配置的东西，记一下webHook地址： GitHub在GitHub上新建一个仓库，用于存放项目源码，并配置钩子： 创建 Jenkins Job 备注：npm run deploy 现在只需写一篇文章并push到GitHub就可以了","categories":[{"name":"个人博客创建及使用","slug":"个人博客创建及使用","permalink":"https://xuzhengtong.com/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/"}],"tags":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://xuzhengtong.com/tags/Jenkins/"}]},{"title":"Spring Cloud Netflix 服务部署（十 一）","slug":"microservices/spring-cloud-netflix/deploy","date":"2020-01-07T14:36:42.000Z","updated":"2020-12-13T11:04:22.075Z","comments":true,"path":"2020/01/07/microservices/spring-cloud-netflix/deploy/","link":"","permalink":"https://xuzhengtong.com/2020/01/07/microservices/spring-cloud-netflix/deploy/","excerpt":"概述在进行此节之前，确保你以能够熟练使用docker，并对CIDR无分类编址有一定了解。","text":"概述在进行此节之前，确保你以能够熟练使用docker，并对CIDR无分类编址有一定了解。 docker overlay网络跨主机通信的一点探究 子网超网 目前，我们已经收获了八个服务： 这里6、7、8将采用doeker集群部署，1、2、3、4、5将采用独立服务的方式部署。结构如下： 环境准备准备三台性能好一点的服务器，这里使用的是vm虚拟机，centos7系统 manager：管理节点，ip：192.168.112.128 worker1：工作节点，ip：192.168.112.133 worker2：工作节点，ip：192.168.112.132 创建集群在管理节点初始化集群 1docker swarm init --advertise-addr 192.168.112.128 在工作节点加入集群 1docker swarm join --token SWMTKN-1-13mv6nll4ymptpp0jdmc3ou4my6uqohkucpnn8zv9b16rda7fv-0dezqs5g36rocxsx38z35uzla 192.168.112.128:2377 创建自定义的overlay网络1docker network create -d overlay --subnet=206.35.199.0/24 --gateway=206.35.199.1 --ip-range 206.35.199.128/25 --attachable cloud-network –ip-range：表示随机分配的ip将在128~255范围内指定，包括Endpoint的端点IP。主要目的是因为我在创建这个网络之前就已经完成了项目的相关地址配置（如eureka:206.35.199.2），为了防止Endpoint使用到项目配置的这些地址而引起IP地址冲突，将随机分配的范围指定在此网段的后半部分。 搭建镜像项目地址 服务 地址 Eureka 206.35.199.2 Config 206.35.199.3 Zipkin 206.35.199.4 Spring Boot Admin 206.35.199.5 Zuul 206.35.199.6 其它 随机 这里需要指定eureka、config、zipKin的地址。完成之后修改项目为发行版（RELEASE），项目源码：https://github.com/intxzt/spring-cloud-netflix.git 使用dockerFile构建镜像DockerFile以eureka为例 1234FROM openjdk:8COPY cloud-eureka-service-1.0.0-RELEASE.jar &#x2F;usr&#x2F;local&#x2F;jar&#x2F;WORKDIR &#x2F;usr&#x2F;local&#x2F;jarENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;cloud-eureka-service-1.0.0-RELEASE.jar&quot;] 1docker build -t eureka . 这里我已将所有的镜像上传至阿里云镜像仓库： 服务名 仓库地址 eureka registry.cn-hangzhou.aliyuncs.com/intxzt/eureka config registry.cn-hangzhou.aliyuncs.com/intxzt/config sleuth（Spring Boot Admin） registry.cn-hangzhou.aliyuncs.com/intxzt/sleuth zuul registry.cn-hangzhou.aliyuncs.com/intxzt/zuul admin-server registry.cn-hangzhou.aliyuncs.com/intxzt/admin-server feign-server registry.cn-hangzhou.aliyuncs.com/intxzt/feign-server ribbon-server registry.cn-hangzhou.aliyuncs.com/intxzt/ribbon-server 部署 Zipkin服务链路追踪（worker1） 1docker run -p 9411:9411 --ip 206.35.199.4 --network cloud-network -d --name zipkin openzipkin/zipkin eureka注册中心（manager） 1docker run -p 80:8761 --network cloud-network --ip 206.35.199.2 -d --name eureka registry.cn-hangzhou.aliyuncs.com/intxzt/eureka config配置中心（manager） 1docker run -p 8888:8888 --network cloud-network --ip 206.35.199.3 -d --name config registry.cn-hangzhou.aliyuncs.com/intxzt/config sleuth——Spring Boot Admin（worker1） 1docker run -p 8084:8084 --network cloud-network --ip 206.35.199.5 -d --name sleuth registry.cn-hangzhou.aliyuncs.com/intxzt/sleuth zuul网关（worker2） 1docker run -p 8769:8769 --network cloud-network --ip 206.35.199.6 -d --name zuul registry.cn-hangzhou.aliyuncs.com/intxzt/zuul admin-server（manager） 1docker service create --replicas 3 --network cloud-network --name admin-server registry.cn-hangzhou.aliyuncs.com/intxzt/admin-server ribbon-server（manager） 1docker service create --replicas 3 --network cloud-network --name ribbon-server registry.cn-hangzhou.aliyuncs.com/intxzt/ribbon-server feign-server（manager） 1docker service create --replicas 3 --network cloud-network --name feign-server registry.cn-hangzhou.aliyuncs.com/intxzt/feign-server 注意：在括号内标识的节点执行shell命令，服务分布见图deploy-2；6、7、8并没有对外映射端口，需通过zuul网关统一访问。 测试部署完成之后，可以通过网关访问之前测试过的接口。zipkin、eureka、Spring Boot Admin如下：","categories":[{"name":"微服务","slug":"微服务","permalink":"https://xuzhengtong.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Spring Cloud Netflix","slug":"微服务/Spring-Cloud-Netflix","permalink":"https://xuzhengtong.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Spring-Cloud-Netflix/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://xuzhengtong.com/tags/docker/"},{"name":"微服务","slug":"微服务","permalink":"https://xuzhengtong.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Spring Cloud Netflix","slug":"Spring-Cloud-Netflix","permalink":"https://xuzhengtong.com/tags/Spring-Cloud-Netflix/"}]},{"title":"docker overlay网络跨主机通信的一点探究","slug":"docker/docker-overlay-network","date":"2020-01-05T02:58:38.000Z","updated":"2020-12-13T11:04:22.070Z","comments":true,"path":"2020/01/05/docker/docker-overlay-network/","link":"","permalink":"https://xuzhengtong.com/2020/01/05/docker/docker-overlay-network/","excerpt":"ingress overlay网络以下是来至官方文档——Use overlay networks 的一段","text":"ingress overlay网络以下是来至官方文档——Use overlay networks 的一段 When you initialize a swarm or join a Docker host to an existing swarm, two new networks are created on that Docker host: an overlay network called ingress, which handles control and data traffic related to swarm services. When you create a swarm service and do not connect it to a user-defined overlay network, it connects to the ingress network by default. a bridge network called docker_gwbridge, which connects the individual Docker daemon to the other daemons participating in the swarm. 大致意思就是说ingress是集群服务默认使用的overlay网络，用于处理与集群服务有关的控制（负载）和数据流量。 在容器内的应用无法使用此网络进行通信，比如：在只有一个leader的集群上开两个服务：tomcatv1和tomcatv2，以交互的方式进入tomcatv2，并使用此网络去请求tomcat的8080端口，是无法访问的（即便两个IP能够ping通） 创建两个tomcat服务 12docker service create -p 8080:8080 --name tomcatv1 tomcatdocker service create -p 80:8080 --name tomcatv2 tomcat 交互进入tomcatv2： 1docker exec -it tomcatv2.1.i5v2a2vnocgxguoup6fh7jt55 bash 请求tomcatv1： 12345678//pingroot@3a5b888f644a:/usr/local/tomcat# ping 10.255.0.18PING 10.255.0.18 (10.255.0.18) 56(84) bytes of data.64 bytes from 10.255.0.18: icmp_seq=1 ttl=64 time=0.067 ms64 bytes from 10.255.0.18: icmp_seq=2 ttl=64 time=0.080 ms//curl 这里不会有任何结果，可以和 curl localhost:8080 对比一下结果root@3a5b888f644a:/usr/local/tomcat# curl localhost:8080 自定义overlay网络 Prerequisites: Firewall rules for Docker daemons using overlay networks You need the following ports open to traffic to and from each Docker host participating on an overlay network: TCP port 2377 for cluster management communications TCP and UDP port 7946 for communication among nodes UDP port 4789 for overlay network traffic Before you can create an overlay network, you need to either initialize your Docker daemon as a swarm manager using docker swarm init or join it to an existing swarm using docker swarm join. Either of these creates the default ingress overlay network which is used by swarm services by default. You need to do this even if you never plan to use swarm services. Afterward, you can create additional user-defined overlay networks. 两个先决条件：宿主机加入集群和配置防火墙规则（测试使用直接关闭就行） 创建注意：必须是集群管理节点 1docker network create -d overlay my-overlay 这里给出部分参数说明： 名称 描述 –attachable 独立容器也能使用此网络 –driver , -d 网络驱动 –subnet 网段的CIDR格式的子网 –gateway 主子网的IPv4或IPv6网关 –ingress 自定义ingress类型的时候指定，只能有一个ingress网络 –ip-range 从子范围（相对于子网）分配容器ip 更多参数参见：docker network create 测试这次使用创建的my-overlay网络启动服务 12docker service create -p 8080:8080 --network my-overlay --name tomcatv1 tomcatdocker service create -p 80:8080 --network my-overlay --name tomcatv2 tomcat 进入tomcatv2通过my-overlay请求tomcatv1的8080端口 123//这里404的原因是我拉取的tomcat镜像webapps下没有任何东西root@48b4ca6c276c:/usr/local/tomcat# curl 10.0.0.3:8080&lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt;&lt;title&gt;HTTP Status 404 – Not Found&lt;/title&gt;&lt;style type=\"text/css\"&gt;body &#123;font-family:Tahoma,Arial,sans-serif;&#125; h1, h2, h3, b &#123;color:white;background-color:#525D76;&#125; h1 &#123;font-size:22px;&#125; h2 &#123;font-size:16px;&#125; h3 &#123;font-size:14px;&#125; p &#123;font-size:12px;&#125; a &#123;color:black;&#125; .line &#123;height:1px;background-color:#525D76;border:none;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 404 – Not Found&lt;/h1&gt;&lt;hr class=\"line\" /&gt;&lt;p&gt;&lt;b&gt;Type&lt;/b&gt; Status Report&lt;/p&gt;&lt;p&gt;&lt;b&gt;Message&lt;/b&gt; Not found&lt;/p&gt;&lt;p&gt;&lt;b&gt;Description&lt;/b&gt; The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.&lt;/p&gt;&lt;hr class=\"line\" /&gt;&lt;h3&gt;Apache Tomcat/8.5.50&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt; 发现，服务间已能通过此网络正常访问。 注意：当管理节点创建的服务被部署到工作节点，或者工作节点使用此网络部署独立的服务（docker run -p 8080:8080 --network my-overlay -d --name tomcat tomcat）,工作节点会在此网络（my-overlay）自动创建一个端点（Endpoint），用于连接工作节点所在宿主机与其他集群内的宿主机。该端点（Endpoint）将占用此网络（my-overlay）一个随机的IP地址。 Docker 网络模型如下：","categories":[{"name":"docker","slug":"docker","permalink":"https://xuzhengtong.com/categories/docker/"},{"name":"网络配置","slug":"docker/网络配置","permalink":"https://xuzhengtong.com/categories/docker/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://xuzhengtong.com/tags/docker/"}]},{"title":"子网、超网","slug":"internet/network","date":"2020-01-03T04:48:26.000Z","updated":"2020-12-13T11:04:22.071Z","comments":true,"path":"2020/01/03/internet/network/","link":"","permalink":"https://xuzhengtong.com/2020/01/03/internet/network/","excerpt":"子网在ARPANET的早期，IP地址被设计为“分类的IP地址”，就是将IP地址划分为若干个固定类，每一类地址都由两个固定长度的字段组成，其中一个字段是网络号（net-id），它标识主机（或路由器）所连接到的网络。第二个字段是主机号（host-id），它标识该主机（或路由器）。","text":"子网在ARPANET的早期，IP地址被设计为“分类的IP地址”，就是将IP地址划分为若干个固定类，每一类地址都由两个固定长度的字段组成，其中一个字段是网络号（net-id），它标识主机（或路由器）所连接到的网络。第二个字段是主机号（host-id），它标识该主机（或路由器）。如下图所示： 从现在看来，这样的设计并不合理，每一个A类地址网络可连接的最大主机数有16777214(2^24-2)个，B类的地址网络可连接的最大主机数也有65534（2^16-2）个，然而有些网络对接在网络上的主机有限制，根本达不到这样大的数值。有的单位申请到了一个B类地址网络，但所连接的主机数并不多，可是又不愿意申请一个足够使用的C类地址，理由是考虑到未来可能的发展。等等的这些情况造成了IP地址空间的利用率并不高。 为了解决分类的IP地址所带来的各种问题，从1985年起在IP地址中又增加了一个子网号字段，使两级IP地址变成了三级IP地址。这种做法叫做划分子网法 两级IP$$IP ::={&lt;网络号&gt;&lt;主机号&gt;}$$三级IP$$IP ::={&lt;网络号&gt;,&lt;子网号&gt;,&lt;主机号&gt;}$$划分子网将从网络的主机号借若干位，当其他网络发送给本单位某个主机的IP数据报，将根据IP数据报的目标网络号找到连接在本单位网络上的路由器，然后路由器根据网络号和子网号找到目标子网，再把IP数据报交付给目标主机。 接下来就只有一个问题了：路由器是如何将数据报转发到子网的？例如路由器IP：145.13.0.0，目标IP：145.14.3.15，如何将它转发到子网145.14.3.0 由此引出了另外一个概念——子网掩码，如下图所示，将目标IP（145.14.3.15）与子网掩码（255.255.255.0）相与，可以很轻易的得出子网地址：145.14.3.0 无分类编址CIDR(构成超网)CIDR最主要的特点有两个： 消除了传统的A类、B类、C类地址及划分子网的概念，因而可以更加有效的分配IPv4的地址空间。CIDR把32位的IP地址划分为两个部分，前面的部分是网络前缀（network-prefix），用来指明网络，后面的部分则用来指明主机$$IP ::={&lt;网络前缀&gt;&lt;主机号&gt;}$$CIDR把网络前缀都相同的连续IP地址组成一个CIDR地址块，即在IP地址后加上斜线”/“，然后写上网络前缀所占位数。 我们只要知道CIDR地址块中任何一个地址，就知道这个地址块的最小地址和最大地址，如： 128.14.35.7/24，最小地址：128.14.35.0；最大地址：128.14.35.255 128.14.35.7/20，35的二进制表示：00100011，取其前4（20-16）位，后四位补0，得00100000：32，即最小地址：128.14.32.0；最大地址后四位补1，得00101111:47，即最大地址：128.14.47.255 主机号全是0和1的地址一般并不使用。 下图是常用的CIDR地址块，可以看出每一个CIDR地址块的地址数一定是2的整数次幂，除了最后几行外，CIDR地址块包含了多个C类地址（是一个C类地址的2^n倍），这就是构成超网这一名词的来源。 参考及摘选书籍： [1]谢希仁.计算机网络[M].北京:电子工业出版社,2013.","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://xuzhengtong.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"网络层","slug":"网络层","permalink":"https://xuzhengtong.com/tags/%E7%BD%91%E7%BB%9C%E5%B1%82/"}]},{"title":"Spring Cloud Netflix Spring boot admin服务监控（十）","slug":"microservices/spring-cloud-netflix/admin","date":"2019-12-31T15:13:11.000Z","updated":"2020-12-13T11:04:22.074Z","comments":true,"path":"2019/12/31/microservices/spring-cloud-netflix/admin/","link":"","permalink":"https://xuzhengtong.com/2019/12/31/microservices/spring-cloud-netflix/admin/","excerpt":"概述随着开发周期的推移，项目会不断变大，切分出的服务也会越来越多，这时一个个的微服务构成了错综复杂的系统。对于各个微服务系统的健康状态、会话数量、并发数、服务资源、延迟等度量信息的收集就成为了一个挑战。","text":"概述随着开发周期的推移，项目会不断变大，切分出的服务也会越来越多，这时一个个的微服务构成了错综复杂的系统。对于各个微服务系统的健康状态、会话数量、并发数、服务资源、延迟等度量信息的收集就成为了一个挑战。 Spring Boot ActuatorActuator是Spring Boot的模块，它在应用中添加了REST/JMS端点，方便监控和管理应用。端点提供了健康检查、指标监控、访问日志、线程转储、堆转储和环境信息等等。 Spring Boot AdminActuator功能强大，便于其他应用使用端点（只需要简单的REST调用）。但是开发人员使用时就没那么方便了。对于开发人员，有良好的交互界面会更方便浏览监控数据和管理应用。这正是Spring Boot Admin做的工作。它为actuator端点提供了良好的交互界面，并提供了额外的特性。 Spring Boot Admin 有两个角色组成，一个是 Spring Boot Admin Server，一个是 Spring Boot Admin Client。 创建Spring Boot Admin服务端 完整pom文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;groupId&gt;com.xzt&lt;/groupId&gt; &lt;artifactId&gt;cloud-sleuth-service&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;name&gt;cloud-sleuth-service&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-boot-admin.version&gt;2.2.1&lt;/spring-boot-admin.version&gt; &lt;spring-cloud.version&gt;Hoxton.SR1&lt;/spring-cloud.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;de.codecentric&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-admin-starter-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt; &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;de.codecentric&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-admin-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-boot-admin.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 主要是增加了spring-boot-admin-starter-server依赖 1234&lt;dependency&gt; &lt;groupId&gt;de.codecentric&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-admin-starter-server&lt;/artifactId&gt;&lt;/dependency&gt; Application1234567891011121314151617package com.xzt.sleuth;import de.codecentric.boot.admin.server.config.EnableAdminServer;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.netflix.eureka.EnableEurekaClient;@SpringBootApplication@EnableEurekaClient@EnableAdminServerpublic class CloudSleuthServiceApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(CloudSleuthServiceApplication.class, args); &#125;&#125; bootstrap.yml123456789101112spring: cloud: config: name: public-config,sleuth-config label: master profile: dev uri: http://localhost:8888eureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/ 注意这里是使用指定url的方式取配置中心拉取配置文件。如果使用通过eureka获取配置中心地址并拉取配置文件的方式，我这里出现了一个问题：在spring-boot-admin-server之后注册到eureka的服务无法被spring-boot-admin-server获取到，原因未知。下面给出我的版本和配置的相关信息： spring-boot-admin-starter-server:2.2.1 spring-cloud:Hoxton.SR1 spring-boot:2.2.2.RELEASE 1234567891011121314spring: cloud: config: name: public-config,sleuth-config label: master profile: dev discovery: enabled: true service-id: cloud-config-serviceeureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/ git仓库配置文件public-config-dev.yml&amp;配置中心和注册中心的application.ymlpublic-config-dev.yml：所有的项目都要读取的公共配置文件 12345678management: endpoints: web: exposure: include: \"*\" endpoint: health: show-details: always management.endpoints.web.exposure.include=*，Actuator默认只公开了/health和/info端点，要想暴露所有端点只需设置成星号即可 注意：.yml结尾的配置文件，*需要加“” sleuth-config-dev.yml123456spring: application: name: cloud-sleuth-serviceserver: port: 8084 测试依次启动，zipkin-server，eureka，config，spring boot admin，admin-service，访问：http://localhost:8084 总结尽管Spring Boot Admin不是Spring团队提供的模块，但是就其使用频率和使用的舒适度以及兼容性等方面考虑，它可以称的上是管理和监控Spring Boot的最好的开源项目。 在与Spring cloud 结合的方面，Spring Boot Admin Service将通过注册中心拉取应用信息，无需SBA客户端，下面是引用官网的一段： If you already use Spring Cloud Discovery for your applications you don’t need the SBA Client. Just add a DiscoveryClient to Spring Boot Admin Server, the rest is done by our AutoConfiguration. The following steps uses Eureka, but other Spring Cloud Discovery implementations are supported as well. There are examples using Consul and Zookeeper. Also have a look at the Spring Cloud documentation. Add spring-cloud-starter-eureka to you dependencies: pom.xml 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;&lt;/dependency&gt; Enable discovery by adding @EnableDiscoveryClient to your configuration: 123456789101112131415161718192021@Configuration @EnableAutoConfiguration @EnableDiscoveryClient @EnableAdminServer public class SpringBootAdminApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(SpringBootAdminApplication.class, args); &#125; /** * For the sake of brevity we’re disabling the security for now. Have a look at the security section on how to deal with secured endpoints. */ @Configuration public static class SecurityPermitAllConfig extends WebSecurityConfigurerAdapter &#123; @Override protected void configure(HttpSecurity http) throws Exception &#123; http.authorizeRequests().anyRequest().permitAll() .and().csrf().disable(); &#125; &#125; &#125; Tell the Eureka client where to find the service registry: application.yml 12345678910111213141516171819#Configuration section for the Eureka clienteureka: instance: leaseRenewalIntervalInSeconds: 10 health-check-url-path: /actuator/health client: registryFetchIntervalSeconds: 5 serviceUrl: defaultZone: $&#123;EUREKA_SERVICE_URL:http://localhost:8761&#125;/eureka/ #As with Spring Boot 2 most of the endpoints aren’t exposed via http by default, we expose all of them. For production you should carefully choose which endpoints to expose.management: endpoints: web: exposure: include: \"*\" endpoint: health: show-details: ALWAYS","categories":[{"name":"微服务","slug":"微服务","permalink":"https://xuzhengtong.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Spring Cloud Netflix","slug":"微服务/Spring-Cloud-Netflix","permalink":"https://xuzhengtong.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Spring-Cloud-Netflix/"}],"tags":[{"name":"微服务","slug":"微服务","permalink":"https://xuzhengtong.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Spring Cloud Netflix","slug":"Spring-Cloud-Netflix","permalink":"https://xuzhengtong.com/tags/Spring-Cloud-Netflix/"},{"name":"Spring boot admin","slug":"Spring-boot-admin","permalink":"https://xuzhengtong.com/tags/Spring-boot-admin/"}]},{"title":"Spring Cloud Netflix ZipKin服务链路追踪（九）","slug":"microservices/spring-cloud-netflix/zipkin","date":"2019-12-31T11:03:23.000Z","updated":"2020-12-13T11:04:22.085Z","comments":true,"path":"2019/12/31/microservices/spring-cloud-netflix/zipkin/","link":"","permalink":"https://xuzhengtong.com/2019/12/31/microservices/spring-cloud-netflix/zipkin/","excerpt":"ZipKin概述ZipKin 是一个开放源代码的分布式跟踪系统，由 Twitter 公司开源，它致力于收集服务的定时数据，以解决微服务架构中的延迟问题，包括数据的收集、存储、查找和展现。它的理论模型来自于 Google Dapper 论文。","text":"ZipKin概述ZipKin 是一个开放源代码的分布式跟踪系统，由 Twitter 公司开源，它致力于收集服务的定时数据，以解决微服务架构中的延迟问题，包括数据的收集、存储、查找和展现。它的理论模型来自于 Google Dapper 论文。 每个服务向 ZipKin 报告计时数据，ZipKin 会根据调用关系通过 ZipKin UI 生成依赖关系图，显示了多少跟踪请求通过每个服务，该系统让开发者可通过一个 Web 前端轻松的收集和分析数据，例如用户每次请求服务的处理时间等，可方便的监测系统中存在的瓶颈。 服务追踪说明 微服务架构是通过业务来划分服务的，使用 REST 调用。对外暴露的一个接口，可能需要很多个服务协同才能完成这个接口功能，如果链路上任何一个服务出现问题或者网络超时，都会形成导致接口调用失败。随着业务的不断扩张，服务之间互相调用会越来越复杂。 随着服务的越来越多，对调用链的分析会越来越复杂。它们之间的调用关系也许如下： 术语解释 Span：基本工作单元，例如，在一个新建的 Span 中发送一个 RPC 等同于发送一个回应请求给 RPC，Span 通过一个 64 位 ID 唯一标识，Trace 以另一个 64 位 ID 表示。 Trace：一系列 Spans 组成的一个树状结构，例如，如果你正在运行一个分布式大数据工程，你可能需要创建一个 Trace。 Annotation：用来即使记录一个事件的存在，一些核心 Annotations 用来定义一个请求的开始和结束 cs：Client Sent，客户端发起一个请求，这个 Annotation 描述了这个 Span 的开始 sr：Server Received，服务端获得请求并准备开始处理它，如果将其 sr 减去 cs 时间戳便可得到网络延迟 ss：Server Sent 表明请求处理的完成(当请求返回客户端)，如果 ss 减去 sr 时间戳便可得到服务端需要的处理请求时间 cr：Client Received 表明 Span 的结束，客户端成功接收到服务端的回复，如果 cr 减去 cs 时间戳便可得到客户端从服务端获取回复的所有所需时间 将 Span 和 Trace 在一个系统中使用 Zipkin 注解的过程图形化： 创建 ZipKin 服务端这里踩了很多坑，本来是采用新建一个项目，并使用 io.zipkin.java:zipkin、io.zipkin.java:zipkin-server、io.zipkin.java:zipkin-autoconfigure-ui 来构建，但是，首先遇到的一个问题就是日志框架的冲突问题，严重到无法运行，接下来又是一个The bean &#39;characterEncodingFilter&#39;, could not be registered.的问题。我到这里就止步了，感觉自建server的方式不太稳定。希望或者需要使用这种方式的自行搜索解决问题吧。 官方给出的三种方案： DockerThe Docker Zipkin project is able to build docker images, provide scripts and a docker-compose.yml for launching pre-built images. The quickest start is to run the latest image directly: 1docker run -d -p 9411:9411 openzipkin/zipkin JavaIf you have Java 8 or higher installed, the quickest way to get started is to fetch the latest release（jar包的下载连接，如果失效请去 官网下载） as a self-contained executable jar: 12curl -sSL https://zipkin.io/quickstart.sh | bash -sjava -jar zipkin.jar Running from SourceZipkin can be run from source if you are developing new features. To achieve this, you’ll need to get Zipkin’s source and build it. 1234567# get the latest sourcegit clone https://github.com/openzipkin/zipkincd zipkin# Build the server and also make its dependencies./mvnw -DskipTests --also-make -pl zipkin-server clean install# Run the serverjava -jar ./zipkin-server/target/zipkin-server-*exec.jar 追踪服务在 所有需要被追踪的项目 中增加 spring-cloud-starter-zipkin 依赖 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;&lt;/dependency&gt; 默认配置为http://localhost:9411。如果要更换ip，在public.yml(公共配置文件)和注册中心与配置中心的application.yml追加如下配置： 123spring: zipkin: base-url: http://localhost:9411 注意：以eureka为例，在第一次请求eureka控制面板，或者第一次向eureka注册时，eureka会去请求追踪服务器（http://localhost:9411/api/v2/spans）,所以追踪服务器至少应在eureka启动之后立即启动。对于开启了自注册的eureka，追踪服务器应当优先启动。 测试依次启动，zipkin-server，eureka，config，feign，admin-service，多次请求feign接口","categories":[{"name":"微服务","slug":"微服务","permalink":"https://xuzhengtong.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Spring Cloud Netflix","slug":"微服务/Spring-Cloud-Netflix","permalink":"https://xuzhengtong.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Spring-Cloud-Netflix/"}],"tags":[{"name":"微服务","slug":"微服务","permalink":"https://xuzhengtong.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Spring Cloud Netflix","slug":"Spring-Cloud-Netflix","permalink":"https://xuzhengtong.com/tags/Spring-Cloud-Netflix/"},{"name":"ZipKin","slug":"ZipKin","permalink":"https://xuzhengtong.com/tags/ZipKin/"}]},{"title":"Spring Cloud Netflix 分布式配置中心（八）","slug":"microservices/spring-cloud-netflix/config","date":"2019-12-27T05:25:42.000Z","updated":"2020-12-13T11:04:22.075Z","comments":true,"path":"2019/12/27/microservices/spring-cloud-netflix/config/","link":"","permalink":"https://xuzhengtong.com/2019/12/27/microservices/spring-cloud-netflix/config/","excerpt":"概述在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。在 Spring Cloud 中，有分布式配置中心组件 Spring Cloud Config ，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程 Git 仓库中。在 Spring Cloud Config 组件中，分两个角色，一是 Config Server，二是 Config Client。","text":"概述在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。在 Spring Cloud 中，有分布式配置中心组件 Spring Cloud Config ，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程 Git 仓库中。在 Spring Cloud Config 组件中，分两个角色，一是 Config Server，二是 Config Client。 以下以网关为例，开始演示Config Server和Config Client的配置。 Config Server创建工程 pom依赖123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;groupId&gt;com.xzt&lt;/groupId&gt; &lt;artifactId&gt;cloud-config-service&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;name&gt;cloud-config-service&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-cloud.version&gt;Hoxton.SR1&lt;/spring-cloud.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt; &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 启动类通过 @EnableConfigServer 注解，开启配置服务器功能 1234567891011121314151617package com.xzt.config;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.config.server.EnableConfigServer;import org.springframework.cloud.netflix.eureka.EnableEurekaClient;@SpringBootApplication@EnableEurekaClient@EnableConfigServerpublic class CloudConfigServiceApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(CloudConfigServiceApplication.class, args); &#125;&#125; application.yml这里使用git仓库的方式 12345678910111213141516171819202122232425262728spring: application: name: cloud-config-service cloud: config: label: master server: git: uri: https://github.com/intxzt/spring-cloud-netflix-config.git search-paths: repo username: password:# 本地# profiles:# active: native #Comma-separated list of active profiles. Can be overridden by a command line switch.# cloud:# config:# server:# native:# search-locations: classpath:/configserver: port: 8888eureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/ 相关配置说明，如下： spring.cloud.config.label：配置仓库的分支 spring.cloud.config.server.git.uri：配置 Git 仓库地址（GitHub、GitLab、码云 …） spring.cloud.config.server.git.search-paths：配置仓库路径（存放配置文件的目录） spring.cloud.config.server.git.username：访问 Git 仓库的账号 spring.cloud.config.server.git.password：访问 Git 仓库的密码 测试浏览器访问http://localhost:8888/admin-config/dev/master显示如下内容 123456789101112131415161718&#123; \"name\": \"admin-config\", \"profiles\": [ \"dev\" ], \"label\": \"master\", \"version\": \"96c75fddffe2f06cbd478ce73bb089e33690b630\", \"state\": null, \"propertySources\": [ &#123; \"name\": \"https://github.com/intxzt/spring-cloud-netflix-config.git/repo/admin-config-dev.yml\", \"source\": &#123; \"spring.application.name\": \"cloud-admin-service\", \"server.port\": 8762 &#125; &#125; ]&#125; Config Client增加pom依赖1234 &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;&lt;/dependency&gt; 删除application.yml 新增bootatrap.yml为了使用Config Server中配置启动网关，需要使用加载顺序更加靠前的bootatrap.yml 1234567891011121314spring: cloud: config: discovery: enabled: true #Flag to indicate that config server discovery is enabled (config server URL will be looked up via discovery). service-id: cloud-config-service name: zuul-config label: master profile: deveureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/ 相关配置说明，如下： spring.cloud.config.discovery.enable：指示已启用配置服务器发现的标志（将通过发现查找配置服务器URL） spring.cloud.config.discovery.service-id：eureka中配置中心的id spring.cloud.config.uri：配置服务中心的网址 spring.cloud.config.name：配置文件名称的前缀 spring.cloud.config.label：配置仓库的分支 spring.cloud.config.profile：配置文件的环境标识 dev：表示开发环境 test：表示测试环境 prod：表示生产环境 注意事项： 配置服务器的默认端口为 8888，如果修改了默认端口，则客户端项目就不能在 application.yml 或 application.properties 中配置 spring.cloud.config.uri，必须在 bootstrap.yml 或是 bootstrap.properties 中配置，原因是 bootstrap 开头的配置文件会被优先加载和配置，切记。 这里使用eureka服务发现配置中心。所以并未指定url。 如果Config Server是本地模式，可不用指定label，规则如下： 对于zuul-config-dev.yml，需要配置spring.cloud.config.name=zuul-config和spring.cloud.config.profile=dev git仓库zuul-config-dev.yml123456789101112spring: application: name: spring-cloud-zuulserver: port: 8769zuul: routes: api-1: path: /admin/** serviceId: cloud-admin-service 测试依次启动注册中心、配置中心、和网关，访问http://localhost:8769/admin/hi?message=HelloRibbon,出现以下内容 1&#123;\"message\":\"无法连接，请检查您的网络\",\"status\":200&#125;","categories":[{"name":"微服务","slug":"微服务","permalink":"https://xuzhengtong.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Spring Cloud Netflix","slug":"微服务/Spring-Cloud-Netflix","permalink":"https://xuzhengtong.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Spring-Cloud-Netflix/"}],"tags":[{"name":"微服务","slug":"微服务","permalink":"https://xuzhengtong.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Spring Cloud Netflix","slug":"Spring-Cloud-Netflix","permalink":"https://xuzhengtong.com/tags/Spring-Cloud-Netflix/"}]},{"title":"Spring Cloud Netflix 使用熔断器仪表盘监控（七）","slug":"microservices/spring-cloud-netflix/fuse-dashboard","date":"2019-12-24T05:55:36.000Z","updated":"2020-12-13T11:04:22.080Z","comments":true,"path":"2019/12/24/microservices/spring-cloud-netflix/fuse-dashboard/","link":"","permalink":"https://xuzhengtong.com/2019/12/24/microservices/spring-cloud-netflix/fuse-dashboard/","excerpt":"概述在 Ribbon 和 Feign 项目增加 Hystrix 仪表盘功能，两个项目的改造方式相同","text":"概述在 Ribbon 和 Feign 项目增加 Hystrix 仪表盘功能，两个项目的改造方式相同 添加依赖1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt;&lt;/dependency&gt; 启动类添加@EnableHystrixDashboard注解 12345678910111213141516171819package com.xzt.feign;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.netflix.eureka.EnableEurekaClient;import org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;import org.springframework.cloud.openfeign.EnableFeignClients;@SpringBootApplication@EnableFeignClients@EnableEurekaClient@EnableHystrixDashboardpublic class CloudFeignServiceApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(CloudFeignServiceApplication.class, args); &#125;&#125; 创建 hystrix.stream 的 Servlet 配置12345678910111213141516171819package com.xzt.feign.config;import com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsStreamServlet;import org.springframework.boot.web.servlet.ServletRegistrationBean;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configurationpublic class HystrixDashboardConfiguration &#123; @Bean public ServletRegistrationBean&lt;HystrixMetricsStreamServlet&gt; getServlet() &#123; HystrixMetricsStreamServlet streamServlet = new HystrixMetricsStreamServlet(); ServletRegistrationBean&lt;HystrixMetricsStreamServlet&gt; registrationBean = new ServletRegistrationBean&lt;&gt;(streamServlet); registrationBean.setLoadOnStartup(1); registrationBean.addUrlMappings(\"/hystrix.stream\"); registrationBean.setName(\"HystrixMetricsStreamServlet\"); return registrationBean; &#125;&#125; 测试浏览器端访问 http://localhost:8765/hystrix 界面如下： 点击 Monitor Stream，进入下一个界面，访问 http://localhost:8765/hi?message=HelloRibbon 此时会出现监控界面： 附：Hystrix 说明什么情况下会触发 fallback 方法 名字 描述 触发fallback EMIT 值传递 NO SUCCESS 执行完成，没有错误 NO FAILURE 执行抛出异常 YES TIMEOUT 执行开始，但没有在允许的时间内完成 NO BAD_REQUEST 执行抛出HystrixBadRequestException YES SHORT_CIRCUITED 断路器打开，不尝试执行 YES THREAD_POOL_REJECTED 线程池拒绝，不尝试执行 YES SEMAPHORE_REJECTED 信号量拒绝，不尝试执行 YES fallback 方法在什么情况下会抛出异常 名字 描述 抛异常 FALLBACK_EMIT Fallback值传递 NO FALLBACK_SUCCESS Fallback执行完成，没有错误 NO FALLBACK_FAILURE Fallback执行抛出出错 YES FALLBACK_REJECTED Fallback信号量拒绝，不尝试执行 YES FALLBACK_MISSING 没有Fallback实例 YES Hystrix Dashboard 界面监控参数 Hystrix 常用配置信息超时时间（默认1000ms，单位：ms） hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds：在调用方配置，被该调用方的所有方法的超时时间都是该值，优先级低于下边的指定配置 hystrix.command.HystrixCommandKey.execution.isolation.thread.timeoutInMilliseconds：在调用方配置，被该调用方的指定方法（HystrixCommandKey 方法名）的超时时间是该值 线程池核心线程数 hystrix.threadpool.default.coreSize：默认为 10 Queue hystrix.threadpool.default.maxQueueSize：最大排队长度。默认 -1，使用 SynchronousQueue。其他值则使用 LinkedBlockingQueue。如果要从 -1 换成其他值则需重启，即该值不能动态调整，若要动态调整，需要使用到下边这个配置 hystrix.threadpool.default.queueSizeRejectionThreshold：排队线程数量阈值，默认为 5，达到时拒绝，如果配置了该选项，队列的大小是该队列 注意： 如果 maxQueueSize=-1 的话，则该选项不起作用 断路器 hystrix.command.default.circuitBreaker.requestVolumeThreshold：当在配置时间窗口内达到此数量的失败后，进行短路。默认 20 个（10s 内请求失败数量达到 20 个，断路器开） hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds：短路多久以后开始尝试是否恢复，默认 5s hystrix.command.default.circuitBreaker.errorThresholdPercentage：出错百分比阈值，当达到此阈值后，开始短路。默认 50% fallback hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests：调用线程允许请求 HystrixCommand.GetFallback() 的最大数量，默认 10。超出时将会有异常抛出，注意：该项配置对于 THREAD 隔离模式也起作用","categories":[{"name":"微服务","slug":"微服务","permalink":"https://xuzhengtong.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Spring Cloud Netflix","slug":"微服务/Spring-Cloud-Netflix","permalink":"https://xuzhengtong.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Spring-Cloud-Netflix/"}],"tags":[{"name":"微服务","slug":"微服务","permalink":"https://xuzhengtong.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Spring Cloud Netflix","slug":"Spring-Cloud-Netflix","permalink":"https://xuzhengtong.com/tags/Spring-Cloud-Netflix/"},{"name":"熔断","slug":"熔断","permalink":"https://xuzhengtong.com/tags/%E7%86%94%E6%96%AD/"}]},{"title":"Spring Cloud Netflix 使用熔断器防止服务雪崩（六）","slug":"microservices/spring-cloud-netflix/fuse","date":"2019-12-23T15:23:12.000Z","updated":"2020-12-13T11:04:22.084Z","comments":true,"path":"2019/12/23/microservices/spring-cloud-netflix/fuse/","link":"","permalink":"https://xuzhengtong.com/2019/12/23/microservices/spring-cloud-netflix/fuse/","excerpt":"概述在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以通过 RPC 相互调用，在 Spring Cloud 中可以用 RestTemplate + Ribbon 和 Feign 来调用。","text":"概述在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以通过 RPC 相互调用，在 Spring Cloud 中可以用 RestTemplate + Ribbon 和 Feign 来调用。为了保证其高可用，单个服务通常会集群部署。由于网络原因或者自身的原因，服务并不能保证 100% 可用，如果单个服务出现问题，调用这个服务就会出现线程阻塞，此时若有大量的请求涌入，Servlet 容器的线程资源会被消耗完毕，导致服务瘫痪。服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的 “雪崩” 效应。 为了解决这个问题，业界提出了熔断器模型。 Netflix 开源了 Hystrix 组件，实现了熔断器模式，Spring Cloud 对这一组件进行了整合。在微服务架构中，一个请求需要调用多个服务是非常常见的，如下图： 较底层的服务如果出现故障，会导致连锁故障。当对特定的服务的调用的不可用达到一个阀值（Hystrix 是 5 秒 20 次） 熔断器将会被打开。 Ribbon添加依赖1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;&lt;/dependency&gt; 启动类添加@EnableHystrix注解 1234567891011121314151617package com.xzt.ribbon;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.netflix.eureka.EnableEurekaClient;import org.springframework.cloud.netflix.hystrix.EnableHystrix;@SpringBootApplication@EnableEurekaClient@EnableHystrixpublic class CloudRibbonServiceApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(CloudRibbonServiceApplication.class, args); &#125;&#125; Service 在 Ribbon 调用方法上增加 @HystrixCommand 注解并指定 fallbackMethod 熔断方法 123456789101112131415161718192021222324252627282930313233343536373839package com.xzt.ribbon.test.service;import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;import com.xzt.ribbon.test.beans.User;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.web.client.RestTemplate;@Servicepublic class AdminService &#123; private Logger logger = LoggerFactory.getLogger(AdminService.class); @Autowired private RestTemplate restTemplate; @HystrixCommand(fallbackMethod = \"hiError\") public String sayHi(String message) &#123; return restTemplate.getForObject(\"http://CLOUD-ADMIN-SERVICE/hi?message=\" + message, String.class); &#125; @HystrixCommand(fallbackMethod = \"hiErrorPost\") public String postHi(String userName, String password) &#123; User user = new User(); user.setUserName(userName); user.setPassword(password); User res = restTemplate.postForObject(\"http://CLOUD-ADMIN-SERVICE/req_post\", user, User.class); return String.format(\"%s ,welcome! I am from port %s\", userName, res.getPort()); &#125; public String hiError(String message) &#123; return \"Hi，your message is :\\\"\" + message + \"\\\" but request error.\"; &#125; //参数必须保持一致，否则报错fallback method wasn't found: hiErrorPost([class java.lang.String, class java.lang.String]) public String hiErrorPost(String userName,String password) &#123; return \"request error.\"; &#125;&#125; 测试熔断器此时我们关闭服务提供者，再次请求 http://localhost:8764/hi?message=HelloRibbon 浏览器会显示： 1Hi，your message is :&quot;HelloRibbon&quot; but request error. Feign Feign 是自带熔断器的，但默认是关闭的。需要在配置文件中配置打开它，在配置文件增加以下代码： 123feign: hystrix: enabled: true 创建熔断器类并实现对应的 Feign 接口1234567891011121314151617package com.xzt.feign.test.service;import com.xzt.feign.test.beans.User;import org.springframework.stereotype.Component;@Componentpublic class AdminHystrix implements AdminService &#123; @Override public String sayHi(String message) &#123; return \"Hi，your message is :\\\"\" + message + \"\\\" but request error.\"; &#125; @Override public User postHi(User user) &#123; return null; &#125;&#125; 在 Service 中增加 fallback 指定类123456789101112131415161718package com.xzt.feign.test.service;import com.xzt.feign.test.beans.User;import org.springframework.cloud.openfeign.FeignClient;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;@FeignClient(value = \"cloud-admin-service\",fallback = AdminHystrix.class)public interface AdminService &#123; @RequestMapping(value = \"hi\", method = RequestMethod.GET) String sayHi(@RequestParam(value = \"message\") String message); @RequestMapping(value = \"req_post\", method = RequestMethod.POST) User postHi(@RequestBody User user);&#125; 测试熔断器此时我们关闭服务提供者，再次请求 http://localhost:8765/hi?message=HelloFeign 浏览器会显示： 1Hi，your message is :&quot;HelloRibbon&quot; but request error.","categories":[{"name":"微服务","slug":"微服务","permalink":"https://xuzhengtong.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Spring Cloud Netflix","slug":"微服务/Spring-Cloud-Netflix","permalink":"https://xuzhengtong.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Spring-Cloud-Netflix/"}],"tags":[{"name":"微服务","slug":"微服务","permalink":"https://xuzhengtong.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Spring Cloud Netflix","slug":"Spring-Cloud-Netflix","permalink":"https://xuzhengtong.com/tags/Spring-Cloud-Netflix/"},{"name":"熔断","slug":"熔断","permalink":"https://xuzhengtong.com/tags/%E7%86%94%E6%96%AD/"}]},{"title":"Spring Cloud Netflix 创建服务消费者——Feign（五）","slug":"microservices/spring-cloud-netflix/feign","date":"2019-12-23T12:20:29.000Z","updated":"2020-12-13T11:04:22.079Z","comments":true,"path":"2019/12/23/microservices/spring-cloud-netflix/feign/","link":"","permalink":"https://xuzhengtong.com/2019/12/23/microservices/spring-cloud-netflix/feign/","excerpt":"概述Feign 是一个声明式的伪 Http 客户端，它使得写 Http 客户端变得更简单。使用 Feign，只需要创建一个接口并注解。它具有可插拔的注解特性，可使用 Feign 注解和 JAX-RS 注解。Feign 支持可插拔的编码器和解码器。Feign 默认集成了 Ribbon，并和 Eureka 结合，默认实现了负载均衡的效果 Feign 采用的是基于接口的注解 Feign 整合了 ribbon","text":"概述Feign 是一个声明式的伪 Http 客户端，它使得写 Http 客户端变得更简单。使用 Feign，只需要创建一个接口并注解。它具有可插拔的注解特性，可使用 Feign 注解和 JAX-RS 注解。Feign 支持可插拔的编码器和解码器。Feign 默认集成了 Ribbon，并和 Eureka 结合，默认实现了负载均衡的效果 Feign 采用的是基于接口的注解 Feign 整合了 ribbon 创建服务消费者 完整pom文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;groupId&gt;com.xzt&lt;/groupId&gt; &lt;artifactId&gt;cloud-feign-service&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;name&gt;cloud-feign-service&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-cloud.version&gt;Hoxton.RELEASE&lt;/spring-cloud.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt; &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; application.yml1234567891011spring: application: name: cloud-feign-serviceserver: port: 8765eureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/ 启动类1234567891011121314151617package com.xzt.feign;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.netflix.eureka.EnableEurekaClient;import org.springframework.cloud.openfeign.EnableFeignClients;@SpringBootApplication@EnableFeignClients@EnableEurekaClientpublic class CloudFeignServiceApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(CloudFeignServiceApplication.class, args); &#125;&#125; Service123456789101112131415161718package com.xzt.feign.test.service;import com.xzt.feign.test.beans.User;import org.springframework.cloud.openfeign.FeignClient;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;@FeignClient(value = \"cloud-admin-service\")public interface AdminService &#123; @RequestMapping(value = \"hi\", method = RequestMethod.GET) String sayHi(@RequestParam(value = \"message\") String message); @RequestMapping(value = \"req_post\", method = RequestMethod.POST) User postHi(@RequestBody User user);&#125; Controller1234567891011121314151617181920212223242526272829package com.xzt.feign.test.controller;import com.xzt.feign.test.beans.User;import com.xzt.feign.test.service.AdminService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class AdminController &#123; @Autowired private AdminService adminService; @RequestMapping(value = \"hi\", method = RequestMethod.GET) public String sayHi(@RequestParam String message) &#123; return adminService.sayHi(message); &#125; @RequestMapping(value = \"req_post\", method = RequestMethod.GET) public String postHi(String userName, String password) &#123; User user = new User(); user.setUserName(userName); user.setPassword(password); User res = adminService.postHi(user); return String.format(\"%s ,welcome! I am from port %s\", userName, res.getPort()); &#125;&#125; 测试GET访问http://localhost:8765/hi?message=12345,将出现以下内容 1Hi，your message is : 12345 i am from port : 8762 POST访问http://localhost:8765/req_post?userName=mo&amp;password=123456,将出现以下内容 1mo ,welcome! I am from port 8762 如果配置多个cloud-admin-service服务，多次访问此接口，端口号应当随之变化","categories":[{"name":"微服务","slug":"微服务","permalink":"https://xuzhengtong.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Spring Cloud Netflix","slug":"微服务/Spring-Cloud-Netflix","permalink":"https://xuzhengtong.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Spring-Cloud-Netflix/"}],"tags":[{"name":"微服务","slug":"微服务","permalink":"https://xuzhengtong.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Spring Cloud Netflix","slug":"Spring-Cloud-Netflix","permalink":"https://xuzhengtong.com/tags/Spring-Cloud-Netflix/"},{"name":"Feign","slug":"Feign","permalink":"https://xuzhengtong.com/tags/Feign/"}]},{"title":"Spring Cloud Netflix 创建服务消费者——Ribbon（四）","slug":"microservices/spring-cloud-netflix/ribbon","date":"2019-12-18T12:10:29.000Z","updated":"2020-12-13T11:04:22.085Z","comments":true,"path":"2019/12/18/microservices/spring-cloud-netflix/ribbon/","link":"","permalink":"https://xuzhengtong.com/2019/12/18/microservices/spring-cloud-netflix/ribbon/","excerpt":"概述在微服务架构中，业务都会被拆分成一个独立的服务，服务与服务的通讯是基于 http restful 的。Spring cloud 有两种服务调用方式，一种是 ribbon + restTemplate，另一种是 feign。","text":"概述在微服务架构中，业务都会被拆分成一个独立的服务，服务与服务的通讯是基于 http restful 的。Spring cloud 有两种服务调用方式，一种是 ribbon + restTemplate，另一种是 feign。 Ribbon+RestTemplateRibbon 是一个负载均衡客户端，可以很好的控制 http 和 tcp 的一些行为。 创建服务消费者 完整pom文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;groupId&gt;com.xzt&lt;/groupId&gt; &lt;artifactId&gt;cloud-ribbon-service&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;name&gt;cloud-ribbon-service&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-cloud.version&gt;Hoxton.SR1&lt;/spring-cloud.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt; &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; application.yml1234567891011spring: application: name: cloud-ribbon-serviceserver: port: 8764eureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/ Configuration 配置注入 RestTemplate 的 Bean，并通过 @LoadBalanced 注解表明开启负载均衡功能 s 123456789101112131415package com.xzt.ribbon.config;import org.springframework.cloud.client.loadbalancer.LoadBalanced;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.client.RestTemplate;@Configurationpublic class RestTemplateConfiguration &#123; @LoadBalanced @Bean public RestTemplate restTemplate() &#123; return new RestTemplate(); &#125;&#125; Service12345678910111213141516171819202122232425262728package com.xzt.ribbon.test.service;import com.xzt.ribbon.test.beans.User;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.web.client.RestTemplate;@Servicepublic class AdminService &#123; private Logger logger = LoggerFactory.getLogger(AdminService.class); @Autowired private RestTemplate restTemplate; public String sayHi(String message) &#123; return restTemplate.getForObject(\"http://CLOUD-ADMIN-SERVICE/hi?message=\" + message, String.class); &#125; public String postHi(String userName, String password) &#123; User user = new User(); user.setUserName(userName); user.setPassword(password); User res = restTemplate.postForObject(\"http://CLOUD-ADMIN-SERVICE/req_post\", user, User.class); return String.format(\"%s ,welcome! I am from port %s\", userName, res.getPort()); &#125;&#125; Controller1234567891011121314151617181920212223package com.xzt.ribbon.test.controller;import com.xzt.ribbon.test.service.AdminService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class AdminController &#123; @Autowired private AdminService adminService; @RequestMapping(value = \"hi\", method = RequestMethod.GET) public String sayHi(String message) &#123; return adminService.sayHi(message); &#125; @RequestMapping(value = \"req_post\", method = RequestMethod.GET) public String postHi(String userName, String password) &#123; return adminService.postHi(userName, password); &#125;&#125; 在cloud-admin-service 增加以下接口123456@RequestMapping(value = \"req_post\", method = RequestMethod.POST)public User postHi(@RequestBody User user)&#123; logger.info(\"userName:&#123;&#125;----password:&#123;&#125;\",user.getUserName(),user.getPassword()); user.setPort(port); return user;&#125; 测试GET访问http://localhost:8764/hi?message=12345,将出现以下内容 1Hi，your message is : 12345 i am from port : 8762 POST访问http://localhost:8764/req_post?userName=mo&amp;password=123456,将出现以下内容 1mo ,welcome! I am from port 8762 如果配置多个cloud-admin-service服务，多次访问此接口，端口号应当随之变化","categories":[{"name":"微服务","slug":"微服务","permalink":"https://xuzhengtong.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Spring Cloud Netflix","slug":"微服务/Spring-Cloud-Netflix","permalink":"https://xuzhengtong.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Spring-Cloud-Netflix/"}],"tags":[{"name":"微服务","slug":"微服务","permalink":"https://xuzhengtong.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Spring Cloud Netflix","slug":"Spring-Cloud-Netflix","permalink":"https://xuzhengtong.com/tags/Spring-Cloud-Netflix/"},{"name":"Ribbon","slug":"Ribbon","permalink":"https://xuzhengtong.com/tags/Ribbon/"},{"name":"RestTemplate","slug":"RestTemplate","permalink":"https://xuzhengtong.com/tags/RestTemplate/"}]},{"title":"Spring Cloud Netflix 使用路由网关的服务过过滤功能（三）","slug":"microservices/spring-cloud-netflix/zuul-filter","date":"2019-12-16T09:40:27.000Z","updated":"2020-12-13T11:04:22.088Z","comments":true,"path":"2019/12/16/microservices/spring-cloud-netflix/zuul-filter/","link":"","permalink":"https://xuzhengtong.com/2019/12/16/microservices/spring-cloud-netflix/zuul-filter/","excerpt":"创建服务过滤器","text":"创建服务过滤器 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071package com.xzt.zuul;import com.netflix.zuul.ZuulFilter;import com.netflix.zuul.context.RequestContext;import com.netflix.zuul.exception.ZuulException;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.stereotype.Component;import javax.servlet.http.HttpServletRequest;import java.io.IOException;@Componentpublic class MyFilter extends ZuulFilter &#123; private Logger logger = LoggerFactory.getLogger(MyFilter.class); /** * 配置过滤类型，有四种不同生命周期的过滤器类型 * 1. pre：路由之前 * 2. routing：路由之时 * 3. post：路由之后 * 4. error：发送错误调用 * @return */ @Override public String filterType() &#123; return \"pre\"; &#125; /** * 配置过滤的顺序 * @return */ @Override public int filterOrder() &#123; return 0; &#125; /** * 配置是否需要过滤：true/需要，false/不需要 * @return */ @Override public boolean shouldFilter() &#123; return true; &#125; /** * 过滤器的具体业务代码 * @return * @throws ZuulException */ @Override public Object run() throws ZuulException &#123; RequestContext context = RequestContext.getCurrentContext(); HttpServletRequest request = context.getRequest(); logger.info(\"&#123;&#125; &gt;&gt;&gt; &#123;&#125;\", request.getMethod(), request.getRequestURL().toString()); String message = request.getParameter(\"message\"); if (message == null) &#123; logger.warn(\"Message is empty\"); context.setSendZuulResponse(false); context.setResponseStatusCode(401); try &#123; context.getResponse().getWriter().write(\"Message is empty\"); &#125; catch (IOException e) &#123; &#125; &#125; else &#123; logger.info(\"OK\"); &#125; return null; &#125;&#125; 测试 浏览器访问：http://localhost:8769/api/a/hi?message=HelloZuul网页显示 1Message is empty","categories":[{"name":"微服务","slug":"微服务","permalink":"https://xuzhengtong.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Spring Cloud Netflix","slug":"微服务/Spring-Cloud-Netflix","permalink":"https://xuzhengtong.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Spring-Cloud-Netflix/"}],"tags":[{"name":"微服务","slug":"微服务","permalink":"https://xuzhengtong.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Spring Cloud Netflix","slug":"Spring-Cloud-Netflix","permalink":"https://xuzhengtong.com/tags/Spring-Cloud-Netflix/"},{"name":"zuul","slug":"zuul","permalink":"https://xuzhengtong.com/tags/zuul/"}]},{"title":"Spring Cloud Netflix 使用路由网关统一访问接口（二）","slug":"microservices/spring-cloud-netflix/zuul","date":"2019-12-09T13:48:56.000Z","updated":"2020-12-13T11:04:22.088Z","comments":true,"path":"2019/12/09/microservices/spring-cloud-netflix/zuul/","link":"","permalink":"https://xuzhengtong.com/2019/12/09/microservices/spring-cloud-netflix/zuul/","excerpt":"Zuul 简介Zuul 的主要功能是路由转发和过滤器。路由功能是微服务的一部分，比如 /api/user 转发到到 User 服务，/api/shop 转发到到 Shop 服务。Zuul 默认和 Ribbon 结合实现了负载均衡的功能。","text":"Zuul 简介Zuul 的主要功能是路由转发和过滤器。路由功能是微服务的一部分，比如 /api/user 转发到到 User 服务，/api/shop 转发到到 Shop 服务。Zuul 默认和 Ribbon 结合实现了负载均衡的功能。 创建路由网关 完整pom文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;groupId&gt;com.xzt&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-zuul&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;name&gt;spring-cloud-zuul&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-cloud.version&gt;Hoxton.RELEASE&lt;/spring-cloud.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt; &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; application.yml配置文件1234567891011121314151617spring: application: name: spring-cloud-zuulserver: port: 8769eureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/zuul: routes: api-1: path: /admin/** serviceId: cloud-admin-service 路由说明： 以 /cloud-admin-client/ 开头的请求都转发给 cloud-admin-client 服务 Application启动类1234567891011121314151617package com.xzt.zuul;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.netflix.eureka.EnableEurekaClient;import org.springframework.cloud.netflix.zuul.EnableZuulProxy;@SpringBootApplication@EnableEurekaClient@EnableZuulProxypublic class SpringCloudZuulApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(SpringCloudZuulApplication.class, args); &#125;&#125; 启动工程，打开浏览器访问：http://127.0.0.1:8769/cloud-admin-client/hi?message=HelloSpring浏览器显示: 1Hi，your message is : HelloSpring i am from port : 8762 配置网关路由失败时的回调12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273package com.xzt.zuul;import com.fasterxml.jackson.databind.ObjectMapper;import org.springframework.cloud.netflix.zuul.filters.route.FallbackProvider;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.client.ClientHttpResponse;import org.springframework.stereotype.Component;import java.io.ByteArrayInputStream;import java.io.IOException;import java.io.InputStream;import java.util.HashMap;import java.util.Map;@Componentpublic class WebAdminFeignFallbackProvider implements FallbackProvider &#123; @Override public String getRoute() &#123; // ServiceId，如果需要所有调用都支持回退，则 return \"*\" 或 return null return null; &#125; @Override public ClientHttpResponse fallbackResponse(String route, Throwable cause) &#123; return new ClientHttpResponse() &#123; /** * 网关向 api 服务请求失败了，但是消费者客户端向网关发起的请求是成功的， * 不应该把 api 的 404,500 等问题抛给客户端 * 网关和 api 服务集群对于客户端来说是黑盒 * @return * @throws IOException */ @Override public HttpStatus getStatusCode() throws IOException &#123; return HttpStatus.OK; &#125; @Override public int getRawStatusCode() throws IOException &#123; return HttpStatus.OK.value(); &#125; @Override public String getStatusText() throws IOException &#123; return HttpStatus.OK.getReasonPhrase(); &#125; @Override public void close() &#123; &#125; @Override public InputStream getBody() throws IOException &#123; ObjectMapper objectMapper = new ObjectMapper(); Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(\"status\", 200); map.put(\"message\", \"无法连接，请检查您的网络\"); return new ByteArrayInputStream(objectMapper.writeValueAsString(map).getBytes(\"UTF-8\")); &#125; @Override public HttpHeaders getHeaders() &#123; HttpHeaders headers = new HttpHeaders(); // 和 getBody 中的内容编码一致 headers.setContentType(MediaType.APPLICATION_JSON_UTF8); return headers; &#125; &#125;; &#125;&#125; 如果访问http://127.0.0.1:8769/cloud-admin-client/hi?message=HelloSpring失败，则显示： 1&#123;&quot;message&quot;:&quot;无法连接，请检查您的网络&quot;,&quot;status&quot;:200&#125;","categories":[{"name":"微服务","slug":"微服务","permalink":"https://xuzhengtong.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Spring Cloud Netflix","slug":"微服务/Spring-Cloud-Netflix","permalink":"https://xuzhengtong.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Spring-Cloud-Netflix/"}],"tags":[{"name":"微服务","slug":"微服务","permalink":"https://xuzhengtong.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Spring Cloud Netflix","slug":"Spring-Cloud-Netflix","permalink":"https://xuzhengtong.com/tags/Spring-Cloud-Netflix/"},{"name":"zuul","slug":"zuul","permalink":"https://xuzhengtong.com/tags/zuul/"}]},{"title":"Spring Cloud Netflix 初体验，创建Eureka注册中心和服务提供者（一）","slug":"microservices/spring-cloud-netflix/Eureka","date":"2019-12-09T12:29:39.000Z","updated":"2020-12-13T11:04:22.072Z","comments":true,"path":"2019/12/09/microservices/spring-cloud-netflix/Eureka/","link":"","permalink":"https://xuzhengtong.com/2019/12/09/microservices/spring-cloud-netflix/Eureka/","excerpt":"服务注册与发现Eureka以下将使用 Intellij Spring Initializr创建","text":"服务注册与发现Eureka以下将使用 Intellij Spring Initializr创建 完整pom文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;groupId&gt;com.xzt&lt;/groupId&gt; &lt;artifactId&gt;cloud-eureka-service&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;name&gt;cloud-eureka-service&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-cloud.version&gt;Hoxton.RELEASE&lt;/spring-cloud.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt; &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; application.yml 配置文件123456789101112131415spring: application: name: cloud-eureka-serviceserver: port: 8761eureka: instance: hostname: localhost client: registerWithEureka: false fetchRegistry: false serviceUrl: defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/ Application 启动类添加@EnableEurekaServer注解 123456789101112131415package com.xzt.eureka;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;@SpringBootApplication@EnableEurekaServerpublic class CloudEurekaServiceApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(CloudEurekaServiceApplication.class, args); &#125;&#125; 至此，即可启动 Eureka 注册中心，在浏览器输入 http://localhost:8761 即可看到Eureka server界面 创建服务提供者 完整pom文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;groupId&gt;com.xzt&lt;/groupId&gt; &lt;artifactId&gt;cloud-admin-client&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;name&gt;cloud-admin-client&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-cloud.version&gt;Hoxton.RELEASE&lt;/spring-cloud.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt; &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; application.yml 配置文件1234567891011spring: application: name: cloud-admin-serviceserver: port: 8762eureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/ Application 启动类123456789101112131415package com.xzt.admin;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.netflix.eureka.EnableEurekaClient;@SpringBootApplication@EnableEurekaClientpublic class CloudAdminClientApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(CloudAdminClientApplication.class, args); &#125;&#125; Controller123456789101112131415161718package com.xzt.admin.test;import org.springframework.beans.factory.annotation.Value;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class AdminController &#123; @Value(\"$&#123;server.port&#125;\") private String port; @RequestMapping(value = \"hi\", method = RequestMethod.GET) public String sayHi(@RequestParam(value = \"message\") String message) &#123; return String.format(\"Hi，your message is : %s i am from port : %s\", message, port); &#125;&#125; 启动工程，会看到如下界面中多了一个名为 CLOUD-ADMIN-CLIENT 的服务，打开 http://localhost:8762/hi?message=HelloSpring ，你会在浏览器上看到 : 1Hi，your message is :&quot;HelloSpring&quot; i am from port：8762 总结在进行接下来的内容之前，需要深度理解一下前面的内容。对此，我提出了下面的一些问题： 为什么要有Eureka？“发现” 是什么意思？ 注册中心是所有微服务实例及其位置的数据库。Netflix Eureka 是一个服务注册中心，它提供了一组用于管理服务实例注册和查询可用实例的 REST API。 关于服务发现，参阅4.服务发现 上面的例子中服务提供者已经提供了对外访问接口，假如有n个服务，难道客户端要通过n个不同的接口访问微服务吗？ API 网关是一个服务器，是系统的单入口点。它类似于面向对象设计模式中的门面（Facade）模式。API 网关封装了内部系统架构，并针对每个客户端提供一个定制 API。它还可用于认证、监控、负载均衡、缓存和静态响应处理。参阅 2.API网关 多个不同的服务之间如何通信？ 在单体应用中，组件可通过语言级方法或者函数相互调用。相比之下，基于微服务的应用是一个运行在多台机器上的分布式系统。通常，每个服务实例都是一个进程。 服务必须使用进程间通信（IPC）机制进行交互。 参阅 3.进程间通信","categories":[{"name":"微服务","slug":"微服务","permalink":"https://xuzhengtong.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Spring Cloud Netflix","slug":"微服务/Spring-Cloud-Netflix","permalink":"https://xuzhengtong.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Spring-Cloud-Netflix/"}],"tags":[{"name":"微服务","slug":"微服务","permalink":"https://xuzhengtong.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Spring Cloud Netflix","slug":"Spring-Cloud-Netflix","permalink":"https://xuzhengtong.com/tags/Spring-Cloud-Netflix/"},{"name":"Eureka","slug":"Eureka","permalink":"https://xuzhengtong.com/tags/Eureka/"}]},{"title":"Oracle自增主键","slug":"database/oracle/increasing-key","date":"2019-11-28T08:56:39.000Z","updated":"2020-12-13T11:04:22.070Z","comments":true,"path":"2019/11/28/database/oracle/increasing-key/","link":"","permalink":"https://xuzhengtong.com/2019/11/28/database/oracle/increasing-key/","excerpt":"设置Oracle自增主键","text":"设置Oracle自增主键 自增序列1234567create sequence seq_no minvalue 1 --最小值 nomaxvalue --最大值 start with 1 --起始值 increment by 1 --增长基数 nocycle --不循环，一直增加 nocache ; -- 不使用缓存 使用的时候使用seq_no.nextval，如： 1insert into student(student_id,first_name,last_name) values(seq_no.nextval,&#39;&#39;,&#39;&#39;); 查看 1select * from dba_sequences where sequence_owner&#x3D;&#39;用户名&#39;; 删除 1DROP SEQUENCE seq_no --删除序列 还可以增加触发器，这样就可以不用指定主键的值而自动插入： 触发器名：tri_student_ins 表名：student 列名（主键）：student_id 12345create trigger tri_student_ins before insert on student for each row when (new.student_id is null) begin select seq_no.nextval into:new.student_id from dual; end; 查看 1select trigger_name from all_triggers where table_name&#x3D;&#39;XXX&#39;; 删除 1DROP TRIGGER PERSON_trigger --删除触发器 函数使用自增主键的优点很明显——使用方便。但是查看就不是很方便了，对于有持久化要求的还是使用函数将主键值保存到数据库表中便于维护。 创建函数： 1234567891011121314151617181920212223CREATE OR REPLACE FUNCTION GETMAXNO(NOTYPE in varchar2)RETURN NUMBERAS MaxNo number(18); pragma autonomous_transaction;BEGIN select max_no into MaxNo FROM Sys_MaxNo where NO_TYPE&#x3D;NOTYPE FOR UPDATE; MaxNo:&#x3D;MaxNo+1; update Sys_MaxNo set max_no&#x3D;MaxNo where NO_TYPE&#x3D;NOTYPE; commit; RETURN MaxNo;exception when no_data_found then begin MaxNo:&#x3D;1; insert into Sys_MaxNo(no_type,max_no) values(NOTYPE,MaxNo); commit; RETURN MaxNo; end; when others then rollback;END GETMAXNO; 这里的SYS_MAXNO有两个字段：MAX_NO : varchar2 NO_TYPE : number","categories":[{"name":"数据库","slug":"数据库","permalink":"https://xuzhengtong.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"Oracle","slug":"数据库/Oracle","permalink":"https://xuzhengtong.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"https://xuzhengtong.com/tags/Oracle/"}]},{"title":"wx小程序滑动验证组件","slug":"mini-program/wx-slider-verification","date":"2019-07-30T13:19:21.000Z","updated":"2020-12-13T11:04:22.089Z","comments":true,"path":"2019/07/30/mini-program/wx-slider-verification/","link":"","permalink":"https://xuzhengtong.com/2019/07/30/mini-program/wx-slider-verification/","excerpt":"事情起因由于客户需求的原因，需要做一个wx小程序的滑动验证的功能，然而","text":"事情起因由于客户需求的原因，需要做一个wx小程序的滑动验证的功能，然而在网上查阅许多资料后，发现这是一件很费劲的事情。相关的借鉴较少，即便参照某些教程，真机调试会有相当程度的卡顿问题，以及网络图片无法加载等等各种问题。谨以此来让后来者少走些弯路吧。 项目地址 开发过程以及一些问题大致的思路是：使用两张画布（canvas），一张画出扣除滑块的背景，一张用来画出滑块，其中第一张画布使用绝对布局，第二张画布使用相对（默认）布局，这样两张画布就能层叠到一起，并且滑块在背景之上，由于第二张画布默认布局，接下来添加控件就能在其之下继续添加。 使用方法概述此项目相当于开发了一个组件（官方文档搜索conponments），有相当详细的使用教程。在此不再赘述，对于此项目，只需在xml界面引入 1&lt;jigsaw bindmyevent=\"myEventListener\"&gt;&lt;/jigsaw 它有两个如下属性，你只需要在jigsaw标签内使用即可，默认为300x150尺寸，不建议去设置它的值，因为可能会涉及到一些css样式的修改。 1234properties: &#123; canvasWidth: Number, canvasHeight: Number &#125;, 事件名为：myevent，在页面js中配置监听事件后，只会在滑块成功时触发，且只设置了一个返回值result，为布尔类型。个人觉得已经足够了。添加更多返回值，请在jigsaw.js中找到以下位置： 123456if (limit &lt; 3) &#123; var myEventDetail = &#123; \"result\": true &#125; // detail对象，提供给事件监听函数 that.triggerEvent('myevent', myEventDetail) &#125; 大致的使用方法就这些了，了解这些内容基本已能完全使用该组件了。如果你想深入的解读源码，以及了解该组件解决了什么问题，请继续阅读。 一些问题 卡顿问题 相信很多人会找到这篇文章都是遇到了真机调试的卡顿问题，而且有相当一部分人搜索完百度后会被误导成认为“canvas导致的卡顿”等等。刚开始的时候我也是这么认为的，直到我看见了下面的内容： 常见的 setData 操作错误1. 频繁的去 setData 在我们分析过的一些案例里，部分小程序会非常频繁（毫秒级）的去setData，其导致了两个后果： Android 下用户在滑动时会感觉到卡顿，操作反馈延迟严重，因为 JS 线程一直在编译执行渲染，未能及时将用户操作事件传递到逻辑层，逻辑层亦无法及时将操作处理结果及时传递到视图层； 渲染有出现延时，由于 WebView 的 JS 线程一直处于忙碌状态，逻辑层到页面层的通信耗时上升，视图层收到的数据消息时距离发出时间已经过去了几百毫秒，渲染的结果并不实时； 2. 每次 setData 都传递大量新数据 由setData的底层实现可知，我们的数据传输实际是一次 evaluateJavascript 脚本过程，当数据量过大时会增加脚本的编译执行时间，占用 WebView JS 线程， 3. 后台态页面进行 setData 当页面进入后台态（用户不可见），不应该继续去进行setData，后台态页面的渲染用户是无法感受的，另外后台态页面去setData也会抢占前台页面的执行。 这是来自官方文档性能篇的一段话，详细看完之后，总结起来就是，在js监听的change之类的高频率刷新的事件，应当避免使用setData设置页面数据。对于这类动画的监听操作，我找到了一个替代品：wxs响应事件，在此页面中监听事件，你可以动态的获取该组件的相关参数（e）以及通过（instance）找到页面中的每个组件的实例，并且设置其class和style属性，就像这样： 123ins.selectComponent('.block').setStyle(&#123; left: '&#123;&#123;-x&#125;&#125;px', &#125;) 需要注意的两点： 1.通过此方式设置style样式之后，原xml页面通过动态绑定（““像这样）的数据将失效 2.e中包含本例的instance对象 网络图片 在微信小程序中我还没发现一个能在真机上正常使用canvas加载的网络图片。由此上网上找了一个替代的方法，即：将图片缓存或下载到本地，再进行画布操作。 1234567wx.getImageInfo(&#123; src: 'https://picsum.photos/1200/600/',//这里直接就是随机的图片，不需要做随机函数 success: function(res) &#123; //console.log(res) that.setData(&#123; url: res.path, &#125;) 成功的状态 下方的slider使用wx小程序的movable-view（移动视图）做的，通过touchend事件来进行滑块验证成功与否的验证，然而搞笑的是，这个监听事件不提供x坐标（非PageX），至少我目前只在change事件发现过它。后来我放弃了，改用如下方式获取组件信息，在onLoad的时候执行一次记录slider的PageX，阿然后在touchend的监听事件中再执行一次，两者相减即为x的值（slider位移）,再用此值和随机生成的滑块的位置的x值相减并取绝对值，即为误差 123456789const query = this.createSelectorQuery() query.select('#slider').boundingClientRect() query.exec(function(res) &#123; //console.log(res) that.setData(&#123; left: res[0].left &#125;) //console.log(that.data.left) &#125;) 刷新的坑 前面已经提到过：wxs设置style样式后将导致原有数据绑定的样式失效，那么如果不做处理，刷新后，滑块的位置将达不到所期望的效果。解决方式很简单，通过事件的冒泡，重新设置style 123&lt;cover-view class='ima_wrap' bindtouchend='&#123;&#123;jigsaw.onEnd&#125;&#125;'&gt; &lt;cover-image src='&#123;&#123;cover_image&#125;&#125;' bindtouchstart='onTouchStart' bindtouchend='onTouchEnd' hidden='&#123;&#123;cover_hidden&#125;&#125;'&gt;&lt;/cover-image&gt;&lt;/cover-view&gt; 12345function onEnd(e,ins)&#123; ins.selectComponent('.block').setStyle(&#123; left: '&#123;&#123;-x&#125;&#125;px', &#125;)&#125; 在你点击图片刷新的时候，会重置style的设置，重新改为动态绑定的形式。此事件的执行顺序为由内而外 一些关键的要点都在这里了，踩坑确实不太舒服，踩完之后确实很舒服！！此项目正确运行的截图：","categories":[{"name":"wx小程序开发","slug":"wx小程序开发","permalink":"https://xuzhengtong.com/categories/wx%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"}],"tags":[]},{"title":"适配器模式","slug":"design-pattern/adapter-pattern","date":"2019-07-18T13:00:23.000Z","updated":"2020-12-13T11:04:22.070Z","comments":true,"path":"2019/07/18/design-pattern/adapter-pattern/","link":"","permalink":"https://xuzhengtong.com/2019/07/18/design-pattern/adapter-pattern/","excerpt":"适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。","text":"适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。 意图：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。 主要解决：主要解决在软件系统中，常常要将一些”现存的对象”放到新的环境中，而新环境要求的接口是现对象不能满足的。 何时使用： 1、系统需要使用现有的类，而此类的接口不符合系统的需要。 2、想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有一致的接口。 3、通过接口转换，将一个类插入另一个类系中。（比如老虎和飞禽，现在多了一个飞虎，在不增加实体的需求下，增加一个适配器，在里面包容一个虎对象，实现飞的接口。） 如何解决：继承或依赖（推荐）。 关键代码：适配器继承或依赖已有的对象，实现想要的目标接口。 注意事项：适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。 1234567891011121314151617181920212223242526272829303132333435363738//第一种public class Adapter implements MP3Player &#123; private WMAPlayer wmaPlayer; private Adapter() &#123; super(); &#125; public Adapter(WMAPlayer wmaPlayer)&#123; this.wmaPlayer = wmaPlayer; &#125; @Override public void work() &#123; wmaPlayer.work(); &#125;&#125;MP3Player mp3Player = new MP3PlayerImpl();WMAPlayer wmaPlayer = new WMAPlayerImpl();MP3Player adapter = new Adapter(wmaPlayer);mp3Player.work();adapter.work();//第二种（抽象、重写机制）public abstract class AnimalAdapter &#123; public void run() &#123; &#125; public void eat() &#123; &#125; public void swim() &#123; &#125;&#125;public class Dog extends AnimalAdapter &#123; @Override public void run() &#123; System.out.println(\"run\"); &#125;&#125;","categories":[{"name":"设计模式","slug":"设计模式","permalink":"https://xuzhengtong.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],"tags":[]},{"title":"代理模式和模板模式","slug":"design-pattern/proxy-and-template-pattern","date":"2019-07-18T13:00:09.000Z","updated":"2020-12-13T11:04:22.070Z","comments":true,"path":"2019/07/18/design-pattern/proxy-and-template-pattern/","link":"","permalink":"https://xuzhengtong.com/2019/07/18/design-pattern/proxy-and-template-pattern/","excerpt":"在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。","text":"在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。 意图：为其他对象提供一种代理以控制对这个对象的访问。 主要解决：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。 何时使用：想在访问一个类时做一些控制。 实例创建一个动作（action）接口，自定义其实现，并为这个实现添加代理。 123456789101112131415161718192021222324252627282930313233343536373839public interface Action &#123; void doAction();&#125;public class UserAction implements Action &#123; @Override public void doAction() &#123; for (int i = 1; i &lt;= 9; i++) &#123; for (int j = 1; j &lt;= i; j++) &#123; System.out.print(j + \"*\" + i + \"=\" + i * j + \" \"); &#125; System.out.println(); &#125; &#125;&#125;public class ProxyAction implements Action &#123; private UserAction userAction; public ProxyAction(UserAction userAction) &#123; this.userAction = userAction; &#125; @Override public void doAction() &#123; long startTime = System.currentTimeMillis(); userAction.doAction();//真正执行的业务 long endTime = System.currentTimeMillis(); System.out.println(\"执行时间\" + (endTime-startTime)); &#125;&#125;public class ProxyTest &#123; public static void main(String[] args) &#123; Action action1 = new UserAction(); Action action2 = new ProxyAction((UserAction) action1); action2.doAction(); &#125;&#125; 模板模式意图：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。 主要解决：一些方法通用，却在每一个子类都重新写了这一方法。 何时使用：有一些通用的方法。 如何解决：将这些通用算法抽象出来。 关键代码：在抽象类实现，其他步骤在子类实现。 12345678910111213141516171819202122232425abstract class BaseManger &#123; /** * 验证权限 * @param name * @param method */ public void action(String name,String method)&#123; if (\"admin\".equals(name))&#123; execute(method); &#125;else &#123; System.out.println(\"无权限\"); &#125; &#125; public abstract void execute(String method);&#125;public class UserManger extends BaseManger&#123; public void execute(String method)&#123; if (\"add\".equals(method)) &#123; System.out.println(\"添加\"); &#125;else if(\"del\".equals(method))&#123; System.out.println(\"删除\"); &#125; &#125;&#125;","categories":[{"name":"设计模式","slug":"设计模式","permalink":"https://xuzhengtong.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],"tags":[]},{"title":"工厂模式","slug":"design-pattern/factory-pattern ","date":"2019-07-15T12:58:23.000Z","updated":"2020-12-13T11:04:22.070Z","comments":true,"path":"2019/07/15/design-pattern/factory-pattern /","link":"","permalink":"https://xuzhengtong.com/2019/07/15/design-pattern/factory-pattern%20/","excerpt":"工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。","text":"工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。 在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。 实例定义一个形状（Sharp）父类，其子类有圆（Circle），正方形（Square），长方形（Rectangle）； 通过工厂模式获取其子类实例。 简单工厂模式1.静态工厂123456789101112131415161718/** * 静态工厂 * @author XuZhengtong * @date 2019/7/15 21:27 */public class StaticFactory &#123; public static ShapeMe getShape(String name)&#123; if (name==null)return null; if (\"circle\".equals(name))&#123; return new Circle(); &#125;else if (\"square\".equals(name))&#123; return new Square(); &#125;else if (\"rectangle\".equals(name))&#123; return new Rectangle(); &#125; return null; &#125;&#125; 可通过类名.get方法获取相应对象。 2.实例工厂去掉上例static修饰，然后通过实例化工厂类并调用get方法获取相应对象。 工厂方法模式12345678910111213141516/** * 工厂方法模式 * @author XuZhengtong * @date 2019/7/15 21:48 */public interface Factory &#123; ShapeMe getSharp();&#125;public class CircleFactory implements Factory &#123; @Override public ShapeMe getSharp() &#123; return new Circle(); &#125;&#125;...//其他形状略过 获取实例方式： 12Factory factory = new CircleFactory();ShapeMe s3 = factory.getSharp(); 抽象工厂模式抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。 在上例中再加入一个实体类Color，对应子类Blue，Yellow。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647/** * 抽象工厂方法 * @author XuZhengtong * @date 2019/7/15 22:06 */public abstract class AbstractFactory &#123; public abstract ShapeMe getSharp(String name); public abstract ColorMe getColor(String name);&#125;public class SharpFactory extends AbstractFactory &#123; @Override public ShapeMe getSharp(String name) &#123; if (name==null)return null; if (\"circle\".equals(name))&#123; return new Circle(); &#125;else if (\"square\".equals(name))&#123; return new Square(); &#125;else if (\"rectangle\".equals(name))&#123; return new Rectangle(); &#125; return null; &#125; @Override public ColorMe getColor(String name) &#123; return null; &#125;&#125;public class ColorFactory extends AbstractFactory &#123; @Override public ShapeMe getSharp(String name) &#123; return null; &#125; @Override public ColorMe getColor(String name) &#123; if (name==null)return null; if (\"blue\".equals(name))&#123; return new Blue(); &#125;else if (\"yellow\".equals(name))&#123; return new Yellow(); &#125; return null; &#125;&#125; 可以看出，这种方式对于创建一个新的工厂有优势 然后你还需要创建一个工厂创造器/生成器类，通过传递形状或颜色信息来获取工厂 1234567891011public class FactoryProducer &#123; public static AbstractFactory getFactory(String name)&#123; if (name==null)return null; if (\"sharp\".equals(name))&#123; return new SharpFactory(); &#125;else if (\"color\".equals(name))&#123; return new ColorFactory(); &#125; return null; &#125;&#125; 获取方式如下 12AbstractFactory sharpFactory = FactoryProducer.getFactory(\"sharp\");ShapeMe s4 = sharpFactory.getSharp(\"circle\"); 总结开发过程中常用的应该是简单工厂模式和抽象工厂模式，当需要频繁为实体类添加工厂时，抽象工厂模式占优。 参靠：工厂模式|菜鸟教程","categories":[{"name":"设计模式","slug":"设计模式","permalink":"https://xuzhengtong.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],"tags":[]},{"title":"关联域名","slug":"blog-create-use/set-domain","date":"2019-07-10T13:56:35.000Z","updated":"2020-12-13T11:04:22.068Z","comments":true,"path":"2019/07/10/blog-create-use/set-domain/","link":"","permalink":"https://xuzhengtong.com/2019/07/10/blog-create-use/set-domain/","excerpt":"前言是时候选个个性化的网站地址了。","text":"前言是时候选个个性化的网站地址了。 准备一个域名，现在有很多网站都提供免费的域名，我用的是腾讯云购买的.com域名。 配置域名解析域名解析都是要在你购买的网站的控制台操作的。 方式一首先获取你的主页ip，使用的你的电脑打开命令行（cmd），执行命令 1ping yourname.github.io 然后将得到的地址按如图方式处理： 方式二直接添加如图解析：（强迫症建议方式，方式一的ip是不断在一小段范围内变化的，但是可以正常访问，但是对于强迫症患者，这么一小点瑕疵足以将其弃用了。。。。） 配置CNAME 文件（重要）如果不进行以下配置，是不能够正常访问的。配置方式也相当简单，在F:\\blog\\source中新建CNAME记事本文件，在其中写入你的域名，保存后去掉.txt后缀。 github绑定域名进入你的github中的blog项目，如图： 然后将你的blog再次部署到github","categories":[{"name":"个人博客创建及使用","slug":"个人博客创建及使用","permalink":"https://xuzhengtong.com/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/"}],"tags":[]},{"title":"撰写博客","slug":"blog-create-use/write","date":"2019-07-09T12:12:44.000Z","updated":"2020-12-13T11:04:22.070Z","comments":true,"path":"2019/07/09/blog-create-use/write/","link":"","permalink":"https://xuzhengtong.com/2019/07/09/blog-create-use/write/","excerpt":"前言完成hexo静态博客的创建后，就可以开始尝试写一篇文章了。","text":"前言完成hexo静态博客的创建后，就可以开始尝试写一篇文章了。在此之前你需要了解MarkDown Markdown Markdown 是一种可以使用普通文本编辑器编写的 标记语言，通过简单的 标记语法，它可以使普通文本内容具有一定的格式。如果你学过前端知识或者对word文档特别熟练，那么你会发现MarkDown会相当简单。即便是不从事编程行业的人，也可以在几个小时内入手。 在此不再对MarkDown语法进行介绍。熟练之后你会发现使用MarkDown甚至是一种享受，So,just enjoy it. 写文章在此介绍我撰写博客的习惯，所以只会讲述频繁用到的一些东西。想要全面的介绍可以前往Hexo文档。1&#123;% asset_img example.jpg This is an example image %&#125; 关于此引用方式，asset_img为类型，不要更改；example.jpg为文件名（非路径）；This is an example image为自定义的说明启用标签页和分类页 首先，你需要在你使用的主题目录下的_config.yml配置文件中取消menu下tag和categories的注释。 然后在blog根目录打开Git Bash，执行以下命令12hexo new page tags&#x2F;&#x2F;标签hexo new page categories&#x2F;&#x2F;分类 执行完毕后会在source文件夹下生成tag和 categories文件夹，修改这两个文件夹下index.md为以下内容123456789title: 标签date: 2014-12-22 12:39:04type: &quot;tags&quot;---&#x2F;&#x2F;注意：本行上下是两个文件的内容（提一下，防止不细看的人。）title: 分类date: 2014-12-22 12:39:04type: &quot;categories&quot;--- 模板设置当我们使用命令hexo new “title”创建文章时，Hexo会根据模板对新文章进行初始化。模板：/scaffolds/post.md一个简单的例子： 1234title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags:categories: 首页文章简单显示部分主题首页会显示文章的全部内容，显得十分冗余，所以有必要只显示一部分内容。在适当位置添加 1&lt;!--more--&gt; 只会显示标志之前的内容。 部署发布123hexo cleanhexo ghexo d","categories":[{"name":"个人博客创建及使用","slug":"个人博客创建及使用","permalink":"https://xuzhengtong.com/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/"}],"tags":[]},{"title":"使用hexo和GitHub创建你的博客","slug":"blog-create-use/blog-create","date":"2019-07-08T12:54:37.000Z","updated":"2020-12-13T11:04:22.067Z","comments":true,"path":"2019/07/08/blog-create-use/blog-create/","link":"","permalink":"https://xuzhengtong.com/2019/07/08/blog-create-use/blog-create/","excerpt":"前言什么是Hexo：Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。","text":"前言什么是Hexo：Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 Github pages：GitHub Pages分两种，一种是你的GitHub用户名建立的username.github.io这样的用户&amp;组织页（站），另一种是依附项目的pages。想建立个人博客是用的第一种，形如cnfeat.github.io这样的可访问的站，每个用户名下面只能建立一个。 步骤开启Github page注册github账号后按如图步骤操作，其中yourname为你的github用户名。 Hexo搭建博客网站安装git 点击下载，然后默认选项安装即可。 安装完成后，任意空位置鼠标右键，出现“Git Bash”，点击出现一个类似命令行窗口，就说明安装成功。 在此命令窗口执行以下命令，建议用户名密码和你Github用户名一致。12git config --global user.name &quot;Your Name&quot;git config --global user.email &quot;email@example.com&quot; 安装node.js 点击下载，默认安装即可。Hexo安装打开 Git Bash，执行1npm install -g hexo-cli 本地部署Hexo 新建一个文件夹，用于存放博客项目，如：F:\\blog 在此文件夹右键打开Git Bash，依次执行：12hexo initnpm install 出现如下目录结构即为安装成功：12345678.├── _config.yml &#x2F;&#x2F; 网站的配置信息，你可以在此配置大部分的参数。├── package.json├── scaffolds &#x2F;&#x2F; 模板文件夹。当你新建文章时，Hexo会根据scaffold来建立文件。├── source &#x2F;&#x2F; 存放用户资源的地方 | ├── _drafts | └── _posts└── themes &#x2F;&#x2F; 存放网站的主题。Hexo会根据主题来生成静态页面。 输入hexo s启动博客，在本地浏览器输入http://localhost:4000/即可访问。更换hexo主题 以next主题为例，在blog文件夹下打开Git Bash，执行如下：1git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next.git themes&#x2F;next 打开D:\\blog下的_config.yml文件，找到theme字段，将其修改为next 通过hexo s再次启动blog，查看效果。 next详细使用教程可查看官方文档，点击前往。托管到githubSSH配置SHH 检查是否已经有SSH Key，打开Git Bash，输入1cd ~&#x2F;.ssh 如果没有.ssh这个目录，则生成一个新的SSH，输入1ssh-keygen -t rsa -C &quot;your e-mail&quot; 此处email和github注册时的email保持一致，不要纠结。另外，接下来会让你输入口令，不需要配置，一路enter。添加 SSH Key 到 GitHub 任意位置打开Git Bash，然后输入1cd ~&#x2F;.ssh 进入到.shh文件夹中再输入ls，查看文件列表 查看公钥1cat id_rsa.pub 将检索到的内容全部复制，然后配置到github。按图操作(图中2,3顺序颠倒) 在最后打开的页面，将复制的内容粘贴到key中，然后保存。测试SSH是否配置成功 打开Git Bash，然后输入1ssh -T git@github.com 如配置了密码则要输入密码,输完按回车,如果显示以下内容，则说明Github中的ssh配置成功。1Hi username! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 将博客网站上传到GitHub 打开F:\\blog文件夹中的_config.yml文件，找到如下位置，填写123456# Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html deploy: type: git repo: github: git@github.com:yourname&#x2F;yourname.github.io.git,master 注： (1) 其中yourname替换成你的Github账户名;(2)注意在yml文件中，:后面都是要带空格的。 在blog文件夹中空白处右击打开Git Bash依次执行12hexo g #生成静态网页hexo d #开始部署 此时，可以通过访问http://yourname.github.io 访问你的博客了。注：当你修改各类配置文件时，你可能需要重启Git Bash来适应你的更改。","categories":[{"name":"个人博客创建及使用","slug":"个人博客创建及使用","permalink":"https://xuzhengtong.com/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/"}],"tags":[]}],"categories":[{"name":"v2ray","slug":"v2ray","permalink":"https://xuzhengtong.com/categories/v2ray/"},{"name":"个人博客创建及使用","slug":"个人博客创建及使用","permalink":"https://xuzhengtong.com/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/"},{"name":"微服务","slug":"微服务","permalink":"https://xuzhengtong.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Spring Cloud Netflix","slug":"微服务/Spring-Cloud-Netflix","permalink":"https://xuzhengtong.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Spring-Cloud-Netflix/"},{"name":"docker","slug":"docker","permalink":"https://xuzhengtong.com/categories/docker/"},{"name":"网络配置","slug":"docker/网络配置","permalink":"https://xuzhengtong.com/categories/docker/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"},{"name":"计算机网络","slug":"计算机网络","permalink":"https://xuzhengtong.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"数据库","slug":"数据库","permalink":"https://xuzhengtong.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"Oracle","slug":"数据库/Oracle","permalink":"https://xuzhengtong.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Oracle/"},{"name":"wx小程序开发","slug":"wx小程序开发","permalink":"https://xuzhengtong.com/categories/wx%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"},{"name":"设计模式","slug":"设计模式","permalink":"https://xuzhengtong.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],"tags":[{"name":"v2ray","slug":"v2ray","permalink":"https://xuzhengtong.com/tags/v2ray/"},{"name":"Jenkins","slug":"Jenkins","permalink":"https://xuzhengtong.com/tags/Jenkins/"},{"name":"docker","slug":"docker","permalink":"https://xuzhengtong.com/tags/docker/"},{"name":"微服务","slug":"微服务","permalink":"https://xuzhengtong.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Spring Cloud Netflix","slug":"Spring-Cloud-Netflix","permalink":"https://xuzhengtong.com/tags/Spring-Cloud-Netflix/"},{"name":"网络层","slug":"网络层","permalink":"https://xuzhengtong.com/tags/%E7%BD%91%E7%BB%9C%E5%B1%82/"},{"name":"Spring boot admin","slug":"Spring-boot-admin","permalink":"https://xuzhengtong.com/tags/Spring-boot-admin/"},{"name":"ZipKin","slug":"ZipKin","permalink":"https://xuzhengtong.com/tags/ZipKin/"},{"name":"熔断","slug":"熔断","permalink":"https://xuzhengtong.com/tags/%E7%86%94%E6%96%AD/"},{"name":"Feign","slug":"Feign","permalink":"https://xuzhengtong.com/tags/Feign/"},{"name":"Ribbon","slug":"Ribbon","permalink":"https://xuzhengtong.com/tags/Ribbon/"},{"name":"RestTemplate","slug":"RestTemplate","permalink":"https://xuzhengtong.com/tags/RestTemplate/"},{"name":"zuul","slug":"zuul","permalink":"https://xuzhengtong.com/tags/zuul/"},{"name":"Eureka","slug":"Eureka","permalink":"https://xuzhengtong.com/tags/Eureka/"},{"name":"Oracle","slug":"Oracle","permalink":"https://xuzhengtong.com/tags/Oracle/"}]}